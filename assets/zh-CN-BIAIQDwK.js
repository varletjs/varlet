import{b as s,m as l,p as t,$ as c,q as n,Q as e,w as r,e as u,h as i}from"./index-B7X_Lqq8.js";const m={components:{}},a={class:"varlet-site-doc"},b={class:"card"},f={id:"shu3xing4"},p={class:"card"},g={id:"shi4jian4"},h={class:"card"},x={id:"cha1cao2"};function v(_,d,k,w,y,C){const o=u("router-link");return i(),l("div",a,[d[9]||(d[9]=t("h2",null,"API",-1)),t("div",b,[t("h3",f,[n(o,{to:"#shu3xing4"},{default:r(()=>d[0]||(d[0]=[e("#")])),_:1}),d[1]||(d[1]=e("属性"))]),d[2]||(d[2]=c("<table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>span</code></td><td>列占据的栅格数</td><td><em>number | string</em></td><td><code>24</code></td></tr><tr><td><code>offset</code></td><td>列偏移的栅格数</td><td><em>number | string</em></td><td><code>0</code></td></tr><tr><td><code>direction</code></td><td>布局方向 可选值为 row column</td><td><em>string</em></td><td><code>row</code></td></tr><tr><td><code>justify</code></td><td>主轴排列方式 可选值为 <code>flex-start</code> <code>flex-end</code> <code>center</code> <code>space-around</code> <code>space-between</code></td><td><em>string</em></td><td><code>-</code></td></tr><tr><td><code>align</code></td><td>交叉轴排列方式 可选值为 <code>stretch</code> <code>center</code> <code>flex-start</code> <code>flex-end</code> <code>baseline</code></td><td><em>string</em></td><td><code>-</code></td></tr><tr><td><code>xs</code></td><td><code>&lt;768px</code> 响应式栅格数或者栅格属性对象</td><td><em>string | number | { span?: number | string, offset?: number | string }</em></td><td><code>-</code></td></tr><tr><td><code>sm</code></td><td><code>≥768px</code> 响应式栅格数或者栅格属性对象</td><td><em>string | number | { span?: number | string, offset?: number | string }</em></td><td><code>-</code></td></tr><tr><td><code>md</code></td><td><code>≥992px</code> 响应式栅格数或者栅格属性对象</td><td><em>string | number | { span?: number | string, offset?: number | string }</em></td><td><code>-</code></td></tr><tr><td><code>lg</code></td><td><code>≥1200px</code> 响应式栅格数或者栅格属性对象</td><td><em>string | number | { span?: number | string, offset?: number | string }</em></td><td><code>-</code></td></tr><tr><td><code>xl</code></td><td><code>≥1920px</code> 响应式栅格数或者栅格属性对象</td><td><em>string | number | { span?: number | string, offset?: number | string }</em></td><td><code>-</code></td></tr></tbody></table>",1))]),t("div",p,[t("h3",g,[n(o,{to:"#shi4jian4"},{default:r(()=>d[3]||(d[3]=[e("#")])),_:1}),d[4]||(d[4]=e("事件"))]),d[5]||(d[5]=t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"事件名"),t("th",null,"说明"),t("th",null,"参数")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",null,"click")]),t("td",null,"点击 Col 时触发"),t("td",null,[t("code",null,"event: Event")])])])],-1))]),t("div",h,[t("h3",x,[n(o,{to:"#cha1cao2"},{default:r(()=>d[6]||(d[6]=[e("#")])),_:1}),d[7]||(d[7]=e("插槽"))]),d[8]||(d[8]=t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"插槽名"),t("th",null,"说明"),t("th",null,"参数")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",null,"default")]),t("td",null,"Col 内容"),t("td",null,[t("code",null,"-")])])])],-1))])])}const $=s(m,[["render",v]]);export{$ as default};
